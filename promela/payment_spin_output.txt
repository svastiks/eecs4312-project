$ spin -g -l -p -r -s  new.pml
  0:	proc  - (:root:) creates proc  0 (:init:)
ltl no_access_without_payment: [] ((! (client_present_for_service)) || (client_completed_payment))
Starting Client with pid 1
  1:	proc  0 (:init::1) creates proc  1 (Client)
  1:	proc  0 (:init::1) new.pml:78 (state 1)	[(run Client())]
Starting PaymentProcessor with pid 2
  2:	proc  0 (:init::1) creates proc  2 (PaymentProcessor)
  2:	proc  0 (:init::1) new.pml:79 (state 2)	[(run PaymentProcessor())]
Starting InvoiceSystem with pid 3
  3:	proc  0 (:init::1) creates proc  3 (InvoiceSystem)
  3:	proc  0 (:init::1) new.pml:80 (state 3)	[(run InvoiceSystem())]
Starting RecurringBilling with pid 4
  4:	proc  0 (:init::1) creates proc  4 (RecurringBilling)
  4:	proc  0 (:init::1) new.pml:81 (state 4)	[(run RecurringBilling())]
Starting FinanceReport with pid 5
  5:	proc  0 (:init::1) creates proc  5 (FinanceReport)
  5:	proc  0 (:init::1) new.pml:82 (state 5)	[(run FinanceReport())]
  6:	proc  1 (Client:1) new.pml:18 (state 1)	[method = credit]
		queue 3 (finance_log): 
		Client(1):method = credit
  7:	proc  1 (Client:1) new.pml:24 (state 6)	[.(goto)]
		queue 3 (finance_log): 
          Client chose payment method: credit
  8:	proc  1 (Client:1) new.pml:24 (state 7)	[printf('Client chose payment method: %e\\n',method)]
		queue 3 (finance_log): 
  9:	proc  1 (Client:1) new.pml:25 (state 8)	[payment_request!method]
  9:	proc  2 (PaymentProcessor:1) new.pml:33 (state 1)	[payment_request?method]
  9:	proc  1 (Client:1) new.pml:25 Sent credit	-> queue 2 (payment_request)
  9:	proc  2 (PaymentProcessor:1) new.pml:33 Recv credit	<- queue 2 (payment_request)
		queue 3 (finance_log): 
		PaymentProcessor(2):method = credit
 10:	proc  1 (Client:1) new.pml:28 (state 9)	[client_present_for_service = 1]
		queue 3 (finance_log): 
		client_present_for_service = 1
              PaymentProcessor received payment using: credit
 11:	proc  2 (PaymentProcessor:1) new.pml:34 (state 2)	[printf('PaymentProcessor received payment using: %e\\n',method)]
		queue 3 (finance_log): 
              Payment succeeded
 12:	proc  2 (PaymentProcessor:1) new.pml:38 (state 3)	[printf('Payment succeeded\\n')]
		queue 3 (finance_log): 
 13:	proc  2 (PaymentProcessor:1) new.pml:39 (state 4)	[invoice_channel!method]
 13:	proc  3 (InvoiceSystem:1) new.pml:50 (state 1)	[invoice_channel?method]
 13:	proc  2 (PaymentProcessor:1) new.pml:39 Sent credit	-> queue 1 (invoice_channel)
 13:	proc  3 (InvoiceSystem:1) new.pml:50 Recv credit	<- queue 1 (invoice_channel)
		queue 3 (finance_log): 
		InvoiceSystem(3):method = credit
                  Invoice generated for payment method: credit
 14:	proc  3 (InvoiceSystem:1) new.pml:51 (state 2)	[printf('Invoice generated for payment method: %e\\n',method)]
		queue 3 (finance_log): 
 15:	proc  2 (PaymentProcessor:1) new.pml:40 Send credit	-> queue 3 (finance_log)
 15:	proc  2 (PaymentProcessor:1) new.pml:40 (state 5)	[finance_log!method]
		queue 3 (finance_log): [credit]
 16:	proc  2 (PaymentProcessor:1) new.pml:41 (state 6)	[client_completed_payment = 1]
		queue 3 (finance_log): [credit]
		client_completed_payment = 1
 17:	proc  5 (FinanceReport:1) new.pml:66 Recv credit	<- queue 3 (finance_log)
 17:	proc  5 (FinanceReport:1) new.pml:66 (state 1)	[finance_log?log_entry]
		queue 3 (finance_log): 
		FinanceReport(5):log_entry = credit
 18:	proc  5 (FinanceReport:1) new.pml:68 (state 2)	[((log_entry!=none))]
		queue 3 (finance_log): 
                          Finance log updated for: credit
 19:	proc  5 (FinanceReport:1) new.pml:69 (state 3)	[printf('Finance log updated for: %e\\n',log_entry)]
		queue 3 (finance_log): 
 20:	proc  5 (FinanceReport:1) new.pml:73 (state 7)	[.(goto)]
		queue 3 (finance_log): 
 21:	proc  2 (PaymentProcessor:1) new.pml:42 (state 7)	[recurring_active = 1]
		queue 3 (finance_log): 
		recurring_active = 1
 22:	proc  2 (PaymentProcessor:1) new.pml:46 (state 11)	[.(goto)]
		queue 3 (finance_log): 
 23:	proc  4 (RecurringBilling:1) new.pml:56 (state 1)	[(recurring_active)]
		queue 3 (finance_log): 
 24:	proc  5 (FinanceReport:1) new.pml:74 (state 9)	[.(goto)]
		queue 3 (finance_log): 
                      Recurring payment initiated
 25:	proc  4 (RecurringBilling:1) new.pml:57 (state 2)	[printf('Recurring payment initiated\\n')]
		queue 3 (finance_log): 
      timeout
#processes: 6
		queue 3 (finance_log): 
		recurring_active = 1
		client_present_for_service = 1
		client_completed_payment = 1
 25:	proc  5 (FinanceReport:1) new.pml:65 (state 8)
		FinanceReport(5):log_entry = credit
 25:	proc  4 (RecurringBilling:1) new.pml:58 (state 3)
 25:	proc  3 (InvoiceSystem:1) new.pml:52 (state 3) <valid end state>
		InvoiceSystem(3):method = credit
 25:	proc  2 (PaymentProcessor:1) new.pml:46 (state 12) <valid end state>
		PaymentProcessor(2):method = credit
 25:	proc  1 (Client:1) new.pml:29 (state 10) <valid end state>
		Client(1):method = credit
 25:	proc  0 (:init::1) new.pml:84 (state 7) <valid end state>
6 processes created